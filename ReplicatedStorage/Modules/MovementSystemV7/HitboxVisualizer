-- Optional hitbox visualization for debugging
-- Game.ReplicatedStorage.Modules.MovementSystemV7.HitboxVisualizer (ModuleScript)

local HitboxVisualizer = {}
local RunService = game:GetService("RunService")
local HitboxManager = require(script.Parent.HitboxManager)

-- Store visual clones per player
local playerVisuals = {}

-- Create neon clone of hitbox
local function createVisual(hitbox)
	local visual = hitbox:Clone()
	visual.Name = "HitboxVisual"
	visual.Material = Enum.Material.Neon
	visual.Transparency = 0.7
	visual.BrickColor = BrickColor.new("Bright green")
	visual.CanCollide = false
	visual.CanTouch = false
	visual.CanQuery = false
	visual.Massless = true

	-- Remove any welds or constraints
	for _, child in ipairs(visual:GetChildren()) do
		if child:IsA("Constraint") or child:IsA("Attachment") then
			child:Destroy()
		end
	end

	visual.Parent = workspace
	return visual
end

-- Update visual position to match hitbox
local function updateVisual(visual, hitbox)
	if visual and visual.Parent and hitbox and hitbox.Parent then
		visual.CFrame = hitbox.CFrame
		visual.Size = hitbox.Size
	end
end

function HitboxVisualizer:Toggle(player, enabled)
	local character = player.Character
	if not character then return end

	if enabled then
		-- Create visual if not exists
		if not playerVisuals[player] then
			local hitbox = HitboxManager:Get(character)
			if hitbox then
				print("Creating hitbox visualization for", player.Name)
				local visual = createVisual(hitbox)
				playerVisuals[player] = {
					visual = visual,
					hitbox = hitbox,
					connection = nil
				}

				-- Start updating visual position
				local data = playerVisuals[player]
				data.connection = RunService.Heartbeat:Connect(function()
					updateVisual(data.visual, data.hitbox)
				end)

				print("Hitbox visual created at position:", visual.Position)
			else
				print("No hitbox found for", player.Name)
			end
		end
	else
		-- Remove visual
		local data = playerVisuals[player]
		if data then
			if data.connection then
				data.connection:Disconnect()
			end
			if data.visual then
				data.visual:Destroy()
			end
			playerVisuals[player] = nil
		end
	end
end

-- Cleanup when player leaves
game.Players.PlayerRemoving:Connect(function(player)
	HitboxVisualizer:Toggle(player, false)
end)

return HitboxVisualizer
