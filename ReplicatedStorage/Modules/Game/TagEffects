--[[
SCRIPT_PATHS
  Self: ReplicatedStorage/Modules/Game/TagEffects
  Requires:
    - ReplicatedStorage/Shared/GameConfig
  Remotes:
    - (none - visual only, reads server state)
  UsesConfigKeys:
    - Debug.Enabled
    - Debug.Channels
]]

-- ReplicatedStorage/Modules/Game/TagEffects.lua
-- CLIENT-ONLY visual effects (reads server authority)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local GameConfig = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Shared"):WaitForChild("GameConfig"))

local TagEffects = {}

-- Debug logging
local function debugLog(message: string)
	if GameConfig.Debug.Enabled and table.find(GameConfig.Debug.Channels, "Mode:FreezeTag") then
		print("[Mode:FreezeTag] " .. message)
	end
end

-- CLIENT READ-ONLY: Check if player is frozen by reading server state
function TagEffects.IsFrozen(player: Player): boolean
	if not player or not player.Character then return false end

	local frozenValue = player.Character:FindFirstChild("IsFrozen")
	return frozenValue and frozenValue.Value == true
end

-- CLIENT READ-ONLY: Visual effects only (no authority to change state)
function TagEffects.ApplyVisualEffects(player: Player, frozen: boolean)
	if not player or not player.Character then return end

	-- Apply client-side visual effects here
	-- Example: particle effects, UI indicators, etc.
	-- DO NOT modify WalkSpeed, JumpPower, or anchoring - server has authority

	if frozen then
		debugLog("VISUAL: Applied freeze effects to " .. player.Name)
	else
		debugLog("VISUAL: Removed freeze effects from " .. player.Name)
	end
end

-- CLIENT: Monitor for server state changes
local function monitorFreezeState(character: Model)
	local frozenValue = character:WaitForChild("IsFrozen", 5)
	if not frozenValue then return end

	local player = Players:GetPlayerFromCharacter(character)
	if not player then return end

	-- Apply initial visual state
	TagEffects.ApplyVisualEffects(player, frozenValue.Value)

	-- Monitor changes
	frozenValue.Changed:Connect(function(newValue)
		TagEffects.ApplyVisualEffects(player, newValue)
	end)
end

-- Set up monitoring for all characters
Players.PlayerAdded:Connect(function(player)
	player.CharacterAdded:Connect(function(character)
		monitorFreezeState(character)
	end)
end)

-- Handle existing characters
for _, player in pairs(Players:GetPlayers()) do
	if player.Character then
		monitorFreezeState(player.Character)
	end
end

return TagEffects
