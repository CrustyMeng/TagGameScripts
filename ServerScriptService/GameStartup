-- ServerScriptService/GameStartup.server.lua
-- Replace your existing GameBootstrap and TagServer with this single startup script

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local ServerScriptService = game:GetService("ServerScriptService")

-- Initialize the new game system
local GameDirector = require(ServerScriptService.Modules:WaitForChild("GameDirector"))
local GameConfig = require(ReplicatedStorage.Modules.Shared:WaitForChild("GameConfig"))

-- Config helper
local function Cfg(path)
	local keys = string.split(path, ".")
	local value = GameConfig
	for _, key in ipairs(keys) do
		value = value[key]
		if not value then break end
	end
	return value
end

-- Wire up remotes from config
local function WireUpFromConfig()
	local remotes = ReplicatedStorage:FindFirstChild("Remotes")
	if not remotes then
		remotes = Instance.new("Folder")
		remotes.Name = "Remotes"
		remotes.Parent = ReplicatedStorage
	end

	-- Create all remotes from config
	for _, remoteName in pairs(Cfg("RemoteNames")) do
		if not remotes:FindFirstChild(remoteName) then
			local remote = Instance.new("RemoteEvent")
			remote.Name = remoteName
			remote.Parent = remotes
		end
	end

	-- Set up mid-join response handler
	if Cfg("FeatureToggles.MidJoin") then
		local midJoinResponseRemote = remotes:FindFirstChild(Cfg("RemoteNames.MidJoinResponse"))
		if midJoinResponseRemote then
			midJoinResponseRemote.OnServerEvent:Connect(function(player, accepted)
				if accepted then
					local TeamsService = require(ServerScriptService.Modules.TeamsService)
					local MatchLoop = require(script.Parent.Modules.MatchLoop)

					-- Double-check mid-join is still allowed
					if MatchLoop.IsMidJoinAllowed() then
						TeamsService.AssignRandomTeamAndSpawn(player)
					end
				end
			end)
		end
	end

	print("Remotes wired up from config")
end

-- Move Tagger tool if needed (same logic as your old bootstrap)
local taggerTool = game:GetService("StarterPack"):FindFirstChild(Cfg("Tagging.ToolName"))
if taggerTool then
	local toolsFolder = ReplicatedStorage:FindFirstChild("Tools")
	if not toolsFolder then
		toolsFolder = Instance.new("Folder")
		toolsFolder.Name = "Tools"
		toolsFolder.Parent = ReplicatedStorage
	end

	print("Moving " .. Cfg("Tagging.ToolName") .. " tool from StarterPack to ReplicatedStorage.Tools...")
	taggerTool.Parent = toolsFolder
	print("Tool moved successfully!")
else
	-- Check if already in correct location
	local toolsFolder = ReplicatedStorage:FindFirstChild("Tools")
	local existingTool = toolsFolder and toolsFolder:FindFirstChild(Cfg("Tagging.ToolName"))
	if not existingTool then
		existingTool = ReplicatedStorage:FindFirstChild(Cfg("Tagging.ToolName"))
	end

	if not existingTool then
		warn("SETUP REQUIRED: Please move your '" .. Cfg("Tagging.ToolName") .. "' tool from StarterPack to ReplicatedStorage.Tools")
	else
		print(Cfg("Tagging.ToolName") .. " tool found - good!")
	end
end

-- Wire up remotes
WireUpFromConfig()

Players.PlayerAdded:Connect(function(player)
	player.CharacterAdded:Connect(function()
		-- Small delay to ensure PlayerGui is ready
		task.wait(1)
		-- Signal client to initialize HUD
		local initHUDRemote = ReplicatedStorage.Remotes:FindFirstChild(Cfg("RemoteNames.InitHUD"))
		if initHUDRemote then
			initHUDRemote:FireClient(player)
		end
	end)
end)

-- Start the game system
GameDirector.Start()

print("Game system initialized!")
print("Configuration: " .. Cfg("FreezeTag.MinPlayersToStart") .. " min players, " .. Cfg("Match.RoundDurationSeconds") .. "s rounds")
