-- ReplicatedStorage/Modules/Game/TeamsService.lua
-- Team management (merged from TeamManager.lua)

local Players = game:GetService("Players")
local Teams = game:GetService("Teams")

local GameConfig = require(script.Parent.GameConfig)

local TeamsService = {}

-- Player role tracking
local playerRoles: {[Player]: string} = {}

-- Config helper
local function Cfg(path)
	local keys = string.split(path, ".")
	local value = GameConfig
	for _, key in ipairs(keys) do
		value = value[key]
		if not value then break end
	end
	return value
end

-- Debug logging
local function debugLog(message: string)
	if GameConfig.Debug.Enabled and table.find(GameConfig.Debug.Channels, "Teams") then
		print("[Teams] " .. message)
	end
end

-- Create teams if they don't exist
function TeamsService.InitializeTeams()
	debugLog("Initializing teams...")

	-- Spectator team
	local spectatorTeam = Teams:FindFirstChild(Cfg("Teams.SpectatorTeamName"))
	if not spectatorTeam then
		spectatorTeam = Instance.new("Team")
		spectatorTeam.Name = Cfg("Teams.SpectatorTeamName")
		spectatorTeam.TeamColor = BrickColor.new(Cfg("Teams.SpectatorColor"))
		spectatorTeam.Parent = Teams
		debugLog("Created spectator team")
	end

	-- Player team  
	local playerTeam = Teams:FindFirstChild(Cfg("Teams.PlayerTeamName"))
	if not playerTeam then
		playerTeam = Instance.new("Team")
		playerTeam.Name = Cfg("Teams.PlayerTeamName")
		playerTeam.TeamColor = BrickColor.new(Cfg("Teams.PlayerColor"))
		playerTeam.Parent = Teams
		debugLog("Created player team")
	end

	-- Tagger team
	local taggerTeam = Teams:FindFirstChild(Cfg("Teams.TaggerTeamName"))
	if not taggerTeam then
		taggerTeam = Instance.new("Team")
		taggerTeam.Name = Cfg("Teams.TaggerTeamName")
		taggerTeam.TeamColor = BrickColor.new(Cfg("Teams.TaggerColor"))
		taggerTeam.Parent = Teams
		debugLog("Created tagger team")
	end
end

-- Count players in each role
local function getTeamCounts(): {[string]: number}
	local counts = { Tagger = 0, Player = 0, Spectator = 0 }

	for _, player in pairs(Players:GetPlayers()) do
		local role = playerRoles[player] or "Spectator"
		counts[role] = counts[role] + 1
	end

	return counts
end

-- Assign player to random team with balancing
function TeamsService.AssignRandomTeamAndSpawn(player: Player)
	local policy = Cfg("MidJoin.TeamPolicy")
	local maxTaggersRatio = Cfg("MidJoin.MaxTaggersRatio")
	local weights = Cfg("MidJoin.RandomTeamWeights")
	local counts = getTeamCounts()
	local totalPlayers = counts.Tagger + counts.Player + 1 -- +1 for new player

	local assignedRole = "Player" -- Default

	if policy == "Random" then
		-- Weighted random assignment
		local taggerWeight = weights.Taggers or 1
		local playerWeight = weights.Players or 3
		local totalWeight = taggerWeight + playerWeight

		local roll = math.random() * totalWeight
		if roll <= taggerWeight then
			assignedRole = "Tagger"
		else
			assignedRole = "Player"
		end

		-- Apply max taggers ratio check
		if assignedRole == "Tagger" and maxTaggersRatio then
			local maxTaggers = math.floor(totalPlayers * maxTaggersRatio)
			if counts.Tagger >= maxTaggers then
				assignedRole = "Player"
			end
		end

	elseif policy == "BalanceLight" then
		-- Keep taggers within Â±1 of players and respect max ratio
		local taggerDeficit = counts.Player - counts.Tagger

		if taggerDeficit > 1 then
			assignedRole = "Tagger"
		elseif taggerDeficit < -1 then
			assignedRole = "Player"
		else
			-- Within balance range, assign randomly but respect ratio
			if math.random() < 0.5 then
				assignedRole = "Tagger"
			else
				assignedRole = "Player"
			end
		end

		-- Apply max taggers ratio check
		if assignedRole == "Tagger" and maxTaggersRatio then
			local maxTaggers = math.floor(totalPlayers * maxTaggersRatio)
			if counts.Tagger >= maxTaggers then
				assignedRole = "Player"
			end
		end
	end

	-- Assign to team
	if assignedRole == "Tagger" then
		TeamsService.AssignTaggers({player})

		-- Give tagger tool if configured
		if Cfg("FreezeTag.GiveTaggerTool") then
			local LoadoutService = require(script.Parent.LoadoutService)
			LoadoutService.GiveTagTool(player)
		end
	else
		TeamsService.AssignPlayers({player})
	end

	-- Respawn if configured
	if Cfg("MidJoin.RespawnOnJoin") then
		local MapService = require(script.Parent.MapService)
		MapService.RespawnPlayerToTeamPad(player)
	end

	-- Update HUD
	local HUDManager = require(script.Parent.HUDManager)
	local GameDirector = require(game.ServerScriptService.Modules.GameDirector)
	local MapService = require(script.Parent.MapService)

	local currentMap = MapService.GetCurrentMapName()
	local currentMode = "FreezeTag" -- TODO: Get from GameModeRegistry

	HUDManager.OnPlayerRoleChange(player, GameDirector.GetState(), currentMode, currentMap)

	debugLog("Mid-join: Assigned " .. player.Name .. " to " .. assignedRole .. " team")
end

-- Move all players to spectator team
function TeamsService.MoveAllToSpectators()
	local spectatorTeam = Teams:FindFirstChild(Cfg("Teams.SpectatorTeamName"))
	if not spectatorTeam then return end

	for _, player in pairs(Players:GetPlayers()) do
		player.Team = spectatorTeam
		playerRoles[player] = "Spectator"
	end

	debugLog("All players moved to spectators")
end

-- Assign specific players as taggers
function TeamsService.AssignTaggers(taggerPlayers: {Player})
	local taggerTeam = Teams:FindFirstChild(Cfg("Teams.TaggerTeamName"))
	if not taggerTeam then return end

	for _, player in pairs(taggerPlayers) do
		if player and player.Parent then
			player.Team = taggerTeam
			playerRoles[player] = "Tagger"
			debugLog("Assigned " .. player.Name .. " as tagger")
		end
	end
end

-- Assign specific players as regular players
function TeamsService.AssignPlayers(playerList: {Player})
	local playerTeam = Teams:FindFirstChild(Cfg("Teams.PlayerTeamName"))
	if not playerTeam then return end

	for _, player in pairs(playerList) do
		if player and player.Parent then
			player.Team = playerTeam
			playerRoles[player] = "Player"
			debugLog("Assigned " .. player.Name .. " as player")
		end
	end
end

-- Get player's current role
function TeamsService.GetPlayerRole(player: Player): string?
	return playerRoles[player]
end

-- Handle late joiners during match
function TeamsService.HandleLateJoin(player: Player)
	-- Check if mid-join is enabled and allowed
	if Cfg("FeatureToggles.MidJoin") then
		local MatchLoop = require(game:GetService("ServerScriptService").Modules.MatchLoop)

		if MatchLoop.IsMidJoinAllowed() then
			-- Offer mid-join
			local remotes = game:GetService("ReplicatedStorage"):FindFirstChild("Remotes")
			if remotes then
				local midJoinRemote = remotes:FindFirstChild(Cfg("RemoteNames.MidJoinOffer"))
				if midJoinRemote then
					local MapService = require(script.Parent.MapService)
					local currentMap = MapService.GetCurrentMapName() or "Unknown"
					local currentMode = "FreezeTag" -- TODO: Get from GameModeRegistry

					midJoinRemote:FireClient(player, {
						mapName = currentMap,
						modeName = currentMode,
						timeLeft = MatchLoop.GetRemainingTime()
					})

					debugLog("Sent mid-join offer to " .. player.Name)
				end
			end
		end
	end

	-- Default behavior - check match state
	local GameDirector = require(game:GetService("ServerScriptService").Modules.GameDirector)

	if GameDirector.GetState() == GameDirector.States.Match then
		if Cfg("Lobby.AllowLateJoinAsSpectator") then
			local spectatorTeam = Teams:FindFirstChild(Cfg("Teams.SpectatorTeamName"))
			if spectatorTeam then
				player.Team = spectatorTeam
				playerRoles[player] = "Spectator"
				debugLog("Late joiner " .. player.Name .. " added as spectator")
			end
		end
	else
		-- Not in match, add to spectators by default
		local spectatorTeam = Teams:FindFirstChild(Cfg("Teams.SpectatorTeamName"))
		if spectatorTeam then
			player.Team = spectatorTeam
			playerRoles[player] = "Spectator"
		end
	end
end

-- Cleanup when player leaves
local function onPlayerRemoving(player: Player)
	playerRoles[player] = nil
	debugLog("Cleaned up " .. player.Name)
end

-- Handle player respawn - maintain team assignment
local function onCharacterAdded(player: Player)
	local role = playerRoles[player]
	if not role then return end

	-- Reassign to correct team (in case they got reset)
	task.wait(0.1) -- Small delay for team assignment

	if role == "Tagger" then
		local taggerTeam = Teams:FindFirstChild(Cfg("Teams.TaggerTeamName"))
		if taggerTeam then player.Team = taggerTeam end
	elseif role == "Player" then
		local playerTeam = Teams:FindFirstChild(Cfg("Teams.PlayerTeamName"))
		if playerTeam then player.Team = playerTeam end
	else
		local spectatorTeam = Teams:FindFirstChild(Cfg("Teams.SpectatorTeamName"))
		if spectatorTeam then player.Team = spectatorTeam end
	end
end

-- Set up event handlers
Players.PlayerAdded:Connect(TeamsService.HandleLateJoin)
Players.PlayerRemoving:Connect(onPlayerRemoving)

Players.PlayerAdded:Connect(function(player)
	player.CharacterAdded:Connect(function()
		onCharacterAdded(player)
	end)
end)

return TeamsService
